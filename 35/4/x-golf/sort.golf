## Heap sort

# Main loop
k # Heap size
d # Initial node (overshoots, doesn't matter)
(
    1c # While size > 0
)
(
    1s # Decrement counter

    d0l( # If counter < 0
        p # Remove counter
        # Stack: ..., size

        d # Prepare bottom pointer for store
        d1a # Prepare bottom pointer for load

        # Stack: ..., size, bottom, bottom

        c # Load bottom
        3c # Load top

        x # Swap
        # Stack: ..., size, bottom, top value, bottom value

        3xo # Write bottom to top
        o # Write top to bottom

        1s # Decrement size

        0 # Set counter to 0
    )i

    d # Starting node

    (
        d2m1a # Left child
        d # Copy child for use in loop
        4c # Heap size
        l
    )
    (
        # Stack: ..., size, counter, parent, left child

        dd1a5cla # If right child is valid, push right, else left

        # Stack: ..., size, counter, parent, left child, left/right

        4ac # Load right? child
        1c5ac # Load left child

        # Stack: ..., size, counter, parent, left child, left/right value, left value

        la # If right? smaller increment pointer to right

        # Stack: ..., size, counter, parent, small child

        x
        6a # Adjust parent pointer for future access
        1c

        # Stack: ..., size, counter, next parent, parent, child

        4a # Adjust child pointer for future store

        d1ac # Load child
        2cc # Load parent

        # Stack: ..., size, counter, next parent, parent, child, child value, parent value

        d2cg( # Swap if child larger
            x
        )i

        # Stack: ..., size, counter, next parent, parent, child, large value, small value
        3cxo # Write small value to parent
        o # Write large value to child

        # Stack: ..., size, counter, next parent, parent
        p
    )wpp
)wpp
