## Heap sort

# Main loop
k # Heap size
d2q1s # Initial node + 1
(
    1c # While size > 0
)
(
    d # Starting node

    d0l( # If counter < 0
        px # Remove starting node, size to top
        # Stack: ..., counter, size
        1s # Decrement size

        d2ac # Load bottom
        3c # Load top

        2c3axo # Write top to bottom
        2xo # Write bottom to top

        x0 # Swap back, replace starting node
    )i

    (
        d2m1a # Left child
        3c # Heap size
        l
    )
    (
        # Stack: ..., size, loop counter, parent

        d2m1a # Push left child

        d1a4cl( # Check if right child valid
            d1a # Get right child
            # Stack: ..., size, loop counter, parent, left, right

            1c5ac # Load left child
            1c6ac # Load right child

            g( # Put smallest index on bottom
                x
            )i
            p # Remove larger index
        )i

        # Stack: ..., size, loop counter, parent, small child

        x1c

        # Stack: ..., size, loop counter, next parent, parent, child

        4a # Adjust child pointer for future store

        d1ac # Load child
        2c6ac # Load parent

        # Stack: ..., size, loop counter, next parent, parent, child, child value, parent value

        x # Swap

        d2cg( # Swap if back child larger
            x
            4ko # Set loop counter to large value
        )i

        # Stack: ..., size, loop counter, next parent, parent, child, large value, small value
        3c6axo # Write small value to parent
        o # Write large value to child

        # Stack: ..., size, loop counter, next parent, parent
        p
    )wp
    1s # Decrement counter
)w
pp
